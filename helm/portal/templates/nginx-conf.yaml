apiVersion: v1
kind: ConfigMap
metadata:
  name: portal-nginx
data:
  main: |
    # For more information on configuration, see:
    #   * Official English Documentation: http://nginx.org/en/docs/
    #   * Official Russian Documentation: http://nginx.org/ru/docs/

    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log notice;
    pid /run/nginx.pid;

    # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
    include /usr/share/nginx/modules/*.conf;

    events {
        worker_connections 1024;
    }

    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile            on;
        tcp_nopush          on;
        keepalive_timeout   65;
        types_hash_max_size 4096;

        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;

        # Load modular configuration files from the /etc/nginx/conf.d directory.
        # See http://nginx.org/en/docs/ngx_core_module.html#include
        # for more information.
        include /etc/nginx/conf.d/*.conf;

        server {
            listen       8000;
            listen       [::]:8000;
            server_name  _;
            root         /usr/share/nginx/html;

            # Load configuration files for the default server block.
            include /etc/nginx/default.d/*.conf;

            error_page 404 /404.html;
            location = /404.html {
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
            }
        }

    # Settings for a TLS enabled server.
    #
    #    server {
    #        listen       443 ssl;
    #        listen       [::]:443 ssl;
    #        http2        on;
    #        server_name  _;
    #        root         /usr/share/nginx/html;
    #
    #        ssl_certificate "/etc/pki/nginx/server.crt";
    #        ssl_certificate_key "/etc/pki/nginx/private/server.key";
    #        ssl_session_cache shared:SSL:1m;
    #        ssl_session_timeout  10m;
    #        ssl_ciphers PROFILE=SYSTEM;
    #        ssl_prefer_server_ciphers on;
    #
    #        # Load configuration files for the default server block.
    #        include /etc/nginx/default.d/*.conf;
    #
    #        error_page 404 /404.html;
    #        location = /404.html {
    #        }
    #
    #        error_page 500 502 503 504 /50x.html;
    #        location = /50x.html {
    #        }
    #    }
    }
  nginx.conf: |
    ##
    # Note that this file actually winds up at
    #    /etc/nginx/conf.d/nginx.conf
    # , and is loaded by /etc/nginx/nginx.conf in an http{} block
    ##

    ##
    # Logging Settings
    # The http_x_* headers are set by the gen3 reverse proxy:
    #    kube/services/revproxy/
    ##
    log_format json '{"gen3log": "nginx", '
            '"date_access": "$time_iso8601", '
            '"user_id": "$http_x_userid", '
            '"request_id": "$http_x_reqid", '
            '"session_id": "$http_x_sessionid", '
            '"visitor_id": "$http_x_visitorid", '
            '"network_client_ip": "$http_x_forwarded_for", '
            '"network_bytes_write": $body_bytes_sent, '
            '"http_response_time": "$request_time", '
            '"http_status_code": $status, '
            '"http_request": "$request_uri", '
            '"http_verb": "$request_method", '
            '"http_referer": "$http_referer", '
            '"http_useragent": "$http_user_agent", '
            '"message": "$request"}';

    log_format aws   '$http_x_forwarded_for - $http_x_userid [$time_local] '
                '"$request" $status $body_bytes_sent '
                '"$http_referer" "$http_user_agent"';

    access_log /dev/stdout json;

    server {
        listen 8080 default_server;
        ssl_certificate /mnt/ssl/nginx.crt;
        ssl_certificate_key /mnt/ssl/nginx.key;
        server_tokens off;

        root /data-portal;
        index index.html index.htm;

        # dev.html signals dev mode - for developer testing
        rewrite ^(\/\w+)?\/dev.html.+$ $1/dev.html;

        # Block all access to things like .git or .htaccess
        location ~ /\. {
        deny all;
        }

        # Block all access to package and config files
        # Note if WAF is deployed this should already be handled by WAF
        location ~ package.json$ {
            deny all;
        }
        location ~ package-lock.json$ {
            deny all;
        }
        location ^~ /npm-debug.log {
            deny all;
        }
        location ^~ /tsconfig.json {
            deny all;
        }
        location ^~ /webpack.config.js {
            deny all;
        }
        location ^~ /yarn.lock {
            deny all;
        }
        location ^~ /nginx.conf {
            deny all;
        }

        location ~* \.(?:manifest|appcache|html?|xml|json)$ {
        expires -1;
        # access_log logs/static.log; # I don't usually include a static log
        }

        location ~* \.(?:css|js)$ {
        try_files $uri =404;
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
        }

        # Any route that doesn't have a file extension (e.g. /devices)
        location / {
            try_files $uri /index.html;
        }
    }