# Default values for sheepdog.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# Global configuration
global:
  # -- (map) AWS configuration
  aws:
    # -- (bool) Set to true if deploying to AWS. Controls ingress annotations.
    enabled: false
    # -- (string) Credentials for AWS stuff.
    awsAccessKeyId:
    # -- (string) Credentials for AWS stuff.
    awsSecretAccessKey:
  # -- (bool) Whether the deployment is for development purposes.
  dev: true

  postgres:
    # -- (bool) Whether the database should be created.
    dbCreate: true
    # -- (string) Name of external secret. Disabled if empty
    externalSecret: ""
    # -- (map) Master credentials to postgres. This is going to be the default postgres server being used for each service, unless each service specifies their own postgres
    master:
      # -- (string) hostname of postgres server
      host:
      # -- (string) username of superuser in postgres. This is used to create or restore databases
      username: postgres
      # -- (string) password for superuser in postgres. This is used to create or restore databases
      password:
      # -- (string) Port for Postgres.
      port: "5432"
  # -- (string) Environment name. This should be the same as vpcname if you're doing an AWS deployment. Currently this is being used to share ALB's if you have multiple namespaces. Might be used other places too.
  environment: default
  # -- (string) Hostname for the deployment.
  hostname: localhost
  # -- (string) ARN of the reverse proxy certificate.
  revproxyArn: arn:aws:acm:us-east-1:123456:certificate
  # -- (string) URL of the data dictionary.
  dictionaryUrl: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
  # -- (string) Portal application name.
  portalApp: gitops
  # -- (string) S3 bucket name for Kubernetes manifest files.
  kubeBucket: kube-gen3
  # -- (string) S3 bucket name for log files.
  logsBucket: logs-gen3
  # -- (bool) Whether public datasets are enabled.
  publicDataSets: true
  # -- (string) Access level for tiers. acceptable values for `tier_access_level` are: `libre`, `regular` and `private`. If omitted, by default common will be treated as `private`
  tierAccessLevel: libre
  # -- (bool) Whether network policies are enabled.
  netPolicy: true
  # -- (int) Number of dispatcher jobs.
  dispatcherJobNum: "10"
  # -- (bool) Whether Datadog is enabled.
  ddEnabled: false
  # -- (bool) If the service will be deployed with a Pod Disruption Budget. Note- you need to have more than 2 replicas for the pdb to be deployed.
  pdb: false
  # -- (int) The minimum amount of pods that are available at all times if the PDB is deployed.
  minAvialable: 1
  # -- (map) External Secrets settings.
  externalSecrets:
    # -- (bool) Will use ExternalSecret resources to pull secrets from Secrets Manager instead of creating them locally. Be cautious as this will override any sheepdog secrets you have deployed.
    deploy: false
    # -- (string) Will deploy a separate External Secret Store for this service.
    separateSecretStore: false

# -- (map) External Secrets settings.
externalSecrets:
  # -- (string) Will override the name of the aws secrets manager secret. Default is "Values.global.environment-.Chart.Name-creds"
  dbcreds:

# -- (map) Postgres database configuration. If db does not exist in postgres cluster and dbCreate is set ot true then these databases will be created for you
postgres:
  # (bool) Whether the database should be restored from s3. Default to global.postgres.dbRestore
  dbRestore: false
  # -- (bool) Whether the database should be created. Default to global.postgres.dbCreate
  dbCreate: false
  # -- (string) Hostname for postgres server. This is a service override, defaults to global.postgres.host
  host: "<postgres server hostname>"
  # -- (string) Database name for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  database: "metadata_db"
  # -- (string) Username for postgres. This is a service override, defaults to <serviceName>-<releaseName>
  username: "metadata_user"
  # -- (string) Port for Postgres.
  port: "5432"
  # -- (string) Password for Postgres. Will be autogenerated if left empty.
  password: "xxxxxxxxxxxxxxxx"
  # -- (string) Will create a Database for the individual service to help with developing it.
  separate: false

# -- (map) Postgresql subchart settings if deployed separately option is set to "true".
# Disable persistence by default so we can spin up and down ephemeral environments
postgresql:
  primary:
    persistence:
      # -- (bool) Option to persist the dbs data.
      enabled: false

# Deployment
releaseLabel: production

# -- (map) Annotations to add to the pod
podAnnotations: {"gen3.io/network-ingress": "sheepdog"}

# -- (map) Configuration for autoscaling the number of replicas
autoscaling:
  # -- (bool) Whether autoscaling is enabled
  enabled: false
  # -- (int) The minimum number of replicas to scale down to
  minReplicas: 1
  # -- (int) The maximum number of replicas to scale up to
  maxReplicas: 100
  # -- (int) The target CPU utilization percentage for autoscaling
  targetCPUUtilizationPercentage: 80

# -- (int) Number of replicas for the deployment.
replicaCount: 1

# -- (int) Number of old revisions to retain
revisionHistoryLimit: 2

# -- (map) Rolling update deployment strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    # -- (int) Number of additional replicas to add during rollout.
    maxSurge: 1
    # -- (int) Maximum amount of pods that can be unavailable during the update.
    maxUnavailable: 0

# -- (bool) Whether Datadog is enabled.
dataDog:
  enabled: false
  env: dev

# -- (map) Affinity to use for the deployment.
affinity:
  podAntiAffinity:
    # -- (map) Option for scheduling to be required or preferred.
    preferredDuringSchedulingIgnoredDuringExecution:
    # -- (int) Weight value for preferred scheduling.
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          # -- (list) Label key for match expression.
          - key: app
            # -- (string) Operation type for the match expression.
            operator: In
            # -- (list) Value for the match expression key.
            values:
            - sheepdog
        # -- (string) Value for topology key label.
        topologyKey: "kubernetes.io/hostname"

# -- (bool) Automount the default service account token
automountServiceAccountToken: false

# -- (int) sheepdog transactions take forever - try to let the complete before termination
terminationGracePeriodSeconds: 50

# -- (map) Docker image information.
image:
  # -- (string) Docker repository.
  repository: quay.io/cdis/sheepdog
  # -- (string) Docker pull policy.
  pullPolicy: Always
  # -- (string) Overrides the image tag whose default is the chart appVersion.
  tag: ""

# Environment Variables
# -- (string) URL of the data dictionary.
dictionaryUrl: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
# -- (string) URL for the indexd service
indexdUrl: http://indexd-service
# -- (string) URL for the fence service
fenceUrl: http://fence-service
# -- (string) URL for the arborist service
arboristUrl: http://arborist-service
authNamespace: default

# -- (list) Volumes to mount to the container.
volumeMounts:
  - name: "config-volume"
    readOnly: true
    mountPath: "/var/www/sheepdog/wsgi.py"
    subPath: "wsgi.py"

# -- (map) Resource requests and limits for the containers in the pod
resources:
  # -- (map) The amount of resources that the container requests
  requests:
    # -- (string) The amount of CPU requested
    cpu: 0.3
    # -- (string) The amount of memory requested
    memory: 12Mi
  # -- (map) The maximum amount of resources that the container is allowed to use
  limits:
    # -- (string) The maximum amount of CPU the container can use
    cpu: 1.0
    # -- (string) The maximum amount of memory the container can use
    memory: 512Mi

# Service and Pod
# -- (map) Kubernetes service information.
service:
  # -- (string) Type of service. Valid values are "ClusterIP", "NodePort", "LoadBalancer", "ExternalName".
  type: ClusterIP
  # -- (int) The port number that the service exposes.
  port: 80

# Secrets
# -- (map) Values for sheepdog secret.
secrets:
  # -- (map) Values for sheepdog's access to the fence database.
  fence:
    # -- (string) Host for fence's db.
    host: "<Host for fence's db>"
    # -- (string) User for fence's db.
    user: "fence_user"
    # -- (string) Password to fence's db.
    password: "xxxxxxxxxxxxxxxx"
    # -- (string) Database name for fence's db.
    database: "fence_db"
  # -- (map) Values for sheepdog's database.
  sheepdog:
    # -- (string) Host for sheepdog's db.
    host: "<Host for sheepdog's db>"
    # -- (string) Password to sheepdog's db.
    password: "xxxxxxxxxxxxxxxx"
    # -- (string) User for sheepdog's db.
    user: "metadata_user"
    # -- (string) Database name for sheepdog's db.
    database: "metadata_db"
  gdcapi:
    # -- (string) GDCAPI token.
    secretKey:
  # -- (map) Values for sheepdog's access to indexd database.
  indexd:
    # -- (string) Password to indexd's db.
    password: "xxxxxxxxxxxxxxxx"
  # -- (str) AWS access key ID to access the db restore job S3 bucket. Overrides global key.
  awsAccessKeyId:
  # -- (str) AWS secret access key ID to access the db restore job S3 bucket. Overrides global key.
  awsSecretAccessKey:

# Values to determine the labels that are used for the deployment, pod, etc.
# -- (string) Valid options are "production" or "dev". If invalid option is set- the value will default to "dev".
release: "production"
# -- (string) Valid options are "true" or "false". If invalid option is set- the value will default to "false".
criticalService: "true"
# -- (string) Label to help organize pods and their use. Any value is valid, but use "_" or "-" to divide words.
partOf: "Core-Service"
# -- (map) Will completely override the selectorLabels defined in the common chart's _label_setup.tpl
selectorLabels:
# -- (map) Will completely override the commonLabels defined in the common chart's _label_setup.tpl
commonLabels:

# Values to configure datadog if ddEnabled is set to "true".
# -- (bool) If enabled, the Datadog Agent will automatically inject Datadog-specific metadata into your application logs.
datadogLogsInjection: true
# -- (bool) If enabled, the Datadog Agent will collect profiling data for your application using the Continuous Profiler. This data can be used to identify performance bottlenecks and optimize your application.
datadogProfilingEnabled: true
# -- (int) A value between 0 and 1, that represents the percentage of requests that will be traced. For example, a value of 0.5 means that 50% of requests will be traced.
datadogTraceSampleRate: 1
