{{- if or (not .Values.global.externalSecrets.deploy) (and .Values.global.externalSecrets.deploy .Values.externalSecrets.createK8sAuditSecret) }}
apiVersion: v1
kind: Secret
metadata:
  name: gen3workflow-g3auto
  labels:
    {{- include "gen3workflow.labels" . | nindent 4 }}
stringData: 
  gen3-workflow-config.yaml: |-
      ##########
      # SERVER #
      ##########

      HOSTNAME: {{ .Values.workflowConfig.hostname }}
      APP_DEBUG: {{ .Values.workflowConfig.debug }}
      HTTPX_DEBUG: {{ .Values.workflowConfig.httpxDebug }}
      DOCS_URL_PREFIX: {{ .Values.workflowConfig.docsUrlPrefix }}
      ARBORIST_URL: {{ .Values.workflowConfig.arboristUrl }}
      MOCK_AUTH: {{ .Values.workflowConfig.mockAuth }}

      ##########
      # AWS S3 #
      ##########

      USER_BUCKETS_REGION: {{ .Values.workflowConfig.userBucketsRegion }}
      S3_OBJECTS_EXPIRATION_DAYS: {{ .Values.workflowConfig.s3ObjectsExpirationDays }}
      S3_ENDPOINTS_AWS_ACCESS_KEY_ID: {{ .Values.workflowConfig.s3AccessKeyId }} #TODO: Get this values from external secrets
      S3_ENDPOINTS_AWS_SECRET_ACCESS_KEY: {{ .Values.workflowConfig.s3SecretAccessKey }} #TODO: Get this values from external secrets
      KMS_ENCRYPTION_ENABLED: {{ .Values.workflowConfig.kmsEncryptionEnabled }}

      #############
      # DATABASE #
      #############
      #TODO: Get these values from external secrets
      DB_DRIVER: {{ .Values.workflowConfig.db.driver }}
      DB_HOST: {{ .Values.workflowConfig.db.host }}
      DB_PORT: {{ .Values.workflowConfig.db.port }}
      DB_USER: {{ .Values.workflowConfig.db.user }}
      DB_PASSWORD: {{ .Values.workflowConfig.db.password }}
      DB_DATABASE: {{ .Values.workflowConfig.db.database }}

      #############
      # GA4GH TES #
      #############

      TES_SERVER_URL: {{ .Values.workflowConfig.tesServerUrl }}
      TASK_IMAGE_WHITELIST: {{ .Values.workflowConfig.taskImageWhitelist | toJson }}

      #############
      #  METRICS  #
      #############

      ENABLE_PROMETHEUS_METRICS: {{ .Values.workflowConfig.enablePrometheusMetrics }}
      PROMETHEUS_MULTIPROC_DIR: {{ .Values.workflowConfig.prometheusMultiprocDir }}
  funnel.conf: |-
      Plugins:
        Params:
          OidcClientId: <redacted>
          OidcClientSecret: <redacted>

        # Turn on task state reconciler. When enabled, Funnel communicates with Kubernetes
        # to find tasks that are stuck in a queued state or errored and
        # updates the task state accordingly (Default value: true)
        DisableReconciler: false
        DisableJobCleanup: false

        # ReconcileRate is how often the compute backend compares states in Funnel's backend
        # to those reported by the backend (Default value: 10m)
        #ReconcileRate: 30s

        Template: |
          # Funnel Worker
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: {{.TaskId}}
            namespace: {{.JobsNamespace}}
            labels:
              app: funnel-worker
              task-id: {{.TaskId}}
              # Our "custom" label representing our changes
              example-label: custom-worker
          spec: 
            backoffLimit: 2
            completions: 1
            template:
              metadata:
                labels:
                  app: funnel-worker
                  task-id: {{.TaskId}}
              spec:
                nodeSelector:
                  role: workflow
                tolerations:
                  - key: "role"
                    operator: "Equal"
                    value: "workflow"
                    effect: "NoSchedule"
                serviceAccountName: funnel-sa-{{.Namespace}}
                restartPolicy: Never
                containers: 
                  - name: funnel-worker-{{.TaskId}}
                    image: {{.Image}}
                    #image: quay.io/ohsu-comp-bio/funnel:testing
                    imagePullPolicy: Always
                    args:
                      - "worker"
                      - "run"
                      - "--config"
                      - "/etc/config/funnel-worker.yaml"
                      - "--taskID"
                      - {{.TaskId}}
                    resources:
                      requests:
                        cpu: {{if ne .Cpus 0 -}}{{.Cpus}}{{ else }}{{"100m"}}{{end}}
                        memory: {{if ne .RamGb 0.0 -}}{{printf "%.0fG" .RamGb}}{{else}}{{"16M"}}{{end}}
                        ephemeral-storage: {{if ne .DiskGb 0.0 -}}{{printf "%.0fG" .DiskGb}}{{else}}{{"100M"}}{{end}}
                    volumeMounts:
                    - name: config-volume
                      mountPath: /etc/config
                    
                    - name: funnel-storage-{{.TaskId}}
                      mountPath: /opt/funnel/funnel-work-dir/{{.TaskId}}
                      subPath: {{.TaskId}}
          
                volumes: 
                - name: config-volume
                  configMap:
                    name: funnel-worker-config-{{.TaskId}}
          
                - name: funnel-storage-{{.TaskId}}
                  persistentVolumeClaim:
                    claimName: funnel-worker-pvc-{{.TaskId}}
          
        ExecutorTemplate: |
          # Task Executor
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: {{.TaskId}}-{{.JobId}}
            namespace: {{.JobsNamespace}}
            labels:
              app: funnel-executor
              job-name: {{.TaskId}}-{{.JobId}}
              # Our "custom" label representing our changes
              example-label: custom-executor
          spec:
            backoffLimit: 2
            completions: 1
            template:
              spec:
                nodeSelector:
                  role: workflow
                tolerations:
                  - key: "role"
                    operator: "Equal"
                    value: "workflow"
                    effect: "NoSchedule"
                restartPolicy: Never
                serviceAccountName: funnel-sa-{{.Namespace}}
                containers:
                - name: funnel-worker-{{.TaskId}}
                  image: {{.Image}}
                  imagePullPolicy: IfNotPresent
                  command: ["/bin/sh", "-c"]
                  args: {{.Command}}
                  workingDir: {{.Workdir}}
                  resources:
                    requests:
                      cpu: {{if ne .Cpus 0 -}}{{.Cpus}}{{ else }}{{"100m"}}{{end}}
                      memory: {{if ne .RamGb 0.0 -}}{{printf "%.0fG" .RamGb}}{{else}}{{"4G"}}{{end}}
                      #ephemeral-storage: {{if ne .DiskGb 0.0 -}}{{printf "%.0fG" .DiskGb}}{{else}}{{"100M"}}{{end}}
                      ephemeral-storage: {{if ne .DiskGb 0.0 -}}{{printf "%.0fG" .DiskGb}}{{else}}{{"2G"}}{{end}}
                  
                  volumeMounts:
                  ### DO NOT CHANGE THIS
                  {{- if .NeedsPVC }}
                    {{range $idx, $item := .Volumes}}
                    - name: funnel-storage-{{$.TaskId}}
                      mountPath: {{$item.ContainerPath}}
                      subPath: {{$.TaskId}}{{$item.ContainerPath}}
                    {{end}}
                  {{- end }}

                volumes:
                {{- if .NeedsPVC }}
                - name: funnel-storage-{{.TaskId}}
                  persistentVolumeClaim:
                    claimName: funnel-worker-pvc-{{.TaskId}}
                {{- end }}
{{- end }}