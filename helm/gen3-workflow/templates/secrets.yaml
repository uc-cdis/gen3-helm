# This is temporarily here until external-secrets and PushSecrets support is added for gen3-workflow
{{- if or (not .Values.funnel.global.externalSecrets.deploy) (and .Values.funnel.global.externalSecrets.deploy .Values.funnel.externalSecrets.createK8sAuditSecret) }}
apiVersion: v1
kind: Secret
metadata:
  name: gen3workflow-g3auto
  labels:
    {{- include "gen3workflow.labels" . | nindent 4 }}
stringData: 
  gen3-workflow-config.yaml: |-
      ##########
      # SERVER #
      ##########
      HOSTNAME: {{ .Values.workflowConfig.hostname }}
      APP_DEBUG: {{ .Values.workflowConfig.debug }}
      HTTPX_DEBUG: {{ .Values.workflowConfig.httpxDebug }}
      DOCS_URL_PREFIX: {{ .Values.workflowConfig.docsUrlPrefix }}
      ARBORIST_URL: {{ .Values.workflowConfig.arboristUrl }}
      MOCK_AUTH: {{ .Values.workflowConfig.mockAuth }}

      ##########
      # AWS S3 #
      ##########
      USER_BUCKETS_REGION: {{ .Values.workflowConfig.userBucketsRegion }}
      S3_OBJECTS_EXPIRATION_DAYS: {{ .Values.workflowConfig.s3ObjectsExpirationDays }}
      S3_ENDPOINTS_AWS_ACCESS_KEY_ID: {{ .Values.workflowConfig.s3AccessKeyId }} #NOTE: This is not used when using IRSA
      S3_ENDPOINTS_AWS_SECRET_ACCESS_KEY: {{ .Values.workflowConfig.s3SecretAccessKey }} #NOTE: This is not used when using IRSA
      KMS_ENCRYPTION_ENABLED: {{ .Values.workflowConfig.kmsEncryptionEnabled }}

      #############
      # GA4GH TES #
      #############

      TES_SERVER_URL: {{ .Values.workflowConfig.tesServerUrl }}
      TASK_IMAGE_WHITELIST: {{ .Values.workflowConfig.taskImageWhitelist | toJson }}

      #############
      #  METRICS  #
      #############

      ENABLE_PROMETHEUS_METRICS: {{ .Values.workflowConfig.enablePrometheusMetrics }}
      PROMETHEUS_MULTIPROC_DIR: {{ .Values.workflowConfig.prometheusMultiprocDir }}}

  funnel.conf: |-
    # This entire secret gets mounted as /etc/config/funnel.conf in the funnel server and worker containers.
    # This is needed because funnel does not support reading sensitive information from Kubernetes secrets yet. 
      Compute: kubernetes

      Kubernetes:
        Executor: kubernetes
        DisableReconciler: false
        DisableJobCleanup: false
        ReconcileRate: 600s
        Namespace: {{ .Release.Namespace }}
        JobsNamespace: {{ .Values.funnel.Kubernetes.JobsNamespace | default .Release.Namespace}}
        ServiceAccount: 

        # Worker Job
        WorkerTemplate: |
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: {{`{{.TaskId}}`}}
            namespace: {{`{{.JobsNamespace}}`}}
            labels:
              app: funnel-worker
              task-id: {{`{{.TaskId}}`}}
              # Custom Labels support
              {{`{{- range $key, $value := .ExtraLabels }}`}}
              {{`{{ $key }}`}}: {{`{{ $value }}`}}
              {{`{{- end }}`}}
          spec:
            backoffLimit: 1
            completions: 1
            template:
              metadata:
                labels:
                  app: funnel-worker
                  task-id: {{`{{.TaskId}}`}}
              spec:
                serviceAccountName: funnel-sa-{{`{{.Namespace}}`}}
                restartPolicy: OnFailure
                containers:
                  - name: funnel-worker-{{`{{.TaskId}}`}}
                    image: {{`{{.Image}}`}}
                    imagePullPolicy: Always
                    args:
                      - "worker"
                      - "run"
                      - "--config"
                      - "/etc/config/funnel-worker.yaml"
                      - "--taskID"
                      - {{`{{.TaskId}}`}}
                    resources:
                      requests:
                        cpu: {{`{{if ne .Cpus 0 -}}{{.Cpus}}{{ else }}{{"100m"}}{{end}}`}}
                        memory: {{`{{if ne .RamGb 0.0 -}}{{printf "%.0fG" .RamGb}}{{else}}{{"16M"}}{{end}}`}}
                        ephemeral-storage: {{`{{if ne .DiskGb 0.0 -}}{{printf "%.0fG" .DiskGb}}{{else}}{{"100M"}}{{end}}`}}
                    volumeMounts:
                    - name: config-volume
                      mountPath: /etc/config
                    {{`{{- if .NeedsPVC }}`}} # Start: Conditional PVC Mount
                    - name: funnel-storage-{{`{{.TaskId}}`}}
                      mountPath: /opt/funnel/funnel-work-dir/{{`{{.TaskId}}`}}
                      subPath: {{`{{.TaskId}}`}}
                    {{`{{- end }}`}} # End: Conditional PVC Mount
                volumes:
                - name: config-volume
                  configMap:
                    name: funnel-worker-config-{{`{{.TaskId}}`}}
                {{`{{- if .NeedsPVC }}`}} # Start: Conditional PVC Volume Definition
                - name: funnel-storage-{{`{{.TaskId}}`}}
                  persistentVolumeClaim:
                    claimName: funnel-worker-pvc-{{`{{.TaskId}}`}}
                {{`{{- end }}`}} # End: Conditional PVC Volume Definition

        # Executor Job
        ExecutorTemplate: |
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: {{`{{.TaskId}}`}}-{{`{{.JobId}}`}}
            namespace: {{`{{.JobsNamespace}}`}}
            labels:
              app: funnel-executor
              job-name: {{`{{.TaskId}}`}}-{{`{{.JobId}}`}}
              example-label: custom-executor
          spec:
            backoffLimit: 2
            completions: 1
            template:
              spec:
                # nodeSelector:
                #   role: workflow
                # tolerations:
                #   - key: "role"
                #     operator: "Equal"
                #     value: "workflow"
                #     effect: "NoSchedule"
                restartPolicy: OnFailure #Never
                serviceAccountName: funnel-sa-{{`{{.Namespace}}`}}
                containers:
                - name: funnel-worker-{{`{{.TaskId}}`}}
                  image: {{`{{.Image}}`}}
                  imagePullPolicy: IfNotPresent
                  command: ["/bin/sh", "-c"]
                  args: {{`{{.Command}}`}}
                  workingDir: {{`{{.Workdir}}`}}
                  resources:
                    requests:
                      cpu: {{`{{if ne .Cpus 0 -}}{{.Cpus}}{{ else }}{{"100m"}}{{end}}`}}
                      memory: {{`{{if ne .RamGb 0.0 -}}{{printf "%.0fG" .RamGb}}{{else}}{{"4G"}}{{end}}`}}
                      ephemeral-storage: {{`{{if ne .DiskGb 0.0 -}}{{printf "%.0fG" .DiskGb}}{{else}}{{"2G"}}{{end}}`}}
                  volumeMounts:
                  ### DO NOT CHANGE THIS
                  {{`{{- if .NeedsPVC }}`}} 
                    {{`{{range $idx, $item := .Volumes}}`}}
                    - name: funnel-storage-{{`{{$.TaskId}}`}}
                      mountPath: {{`{{$item.ContainerPath}}`}}
                      subPath: {{`{{$.TaskId}}`}}{{`{{$item.ContainerPath}}`}}
                    {{`{{end}}`}}
                  {{`{{- end }}`}}
                volumes:
                {{`{{- if .NeedsPVC }}`}}
                - name: funnel-storage-{{`{{.TaskId}}`}}
                  persistentVolumeClaim:
                    claimName: funnel-worker-pvc-{{`{{.TaskId}}`}}
                {{`{{- end }}`}}

        # PV template
        PVTemplate: |
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: funnel-worker-pv-{{`{{.TaskId}}`}}
            labels:
              app: funnel
              taskId: {{`{{.TaskId}}`}}
          spec:
            storageClassName: ""
            capacity:
              storage: "10Mi"
            accessModes:
              - ReadWriteMany
            persistentVolumeReclaimPolicy: Retain
            mountOptions:
              - allow-delete
              - allow-overwrite
              - region={{`{{.Region}}`}}
              - file-mode=0755
              {{`{{- if .KmsKeyID }}`}}
              - sse=aws:kms
              - sse-kms-key-id={{`{{.KmsKeyID}}`}}
              {{`{{- end }}`}}
            csi:
              driver: s3.csi.aws.com
              volumeHandle: s3-csi-{{`{{.TaskId}}`}}
              volumeAttributes:
                bucketName: {{`{{.Bucket}}`}}
            claimRef:
              namespace: {{`{{.Namespace}}`}}
              name: funnel-worker-pvc-{{`{{.TaskId}}`}}

        # PVC template
        PVCTemplate: |
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: funnel-worker-pvc-{{`{{.TaskId}}`}}
            namespace: {{`{{ .Namespace }}`}}
            labels:
              app: funnel
              taskId: {{`{{.TaskId}}`}}
          spec:
            storageClassName: ""
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 10Mi
            volumeName: funnel-worker-pv-{{`{{.TaskId}}`}}
          


      Database: {{ .Values.funnel.Database }}

      EventWriters:
        {{- range .Values.funnel.EventWriters }}
        - {{ . }}
        {{- end }}

      Logger:
        level: {{ .Values.funnel.Logger.level }}
        outputFile: {{ .Values.funnel.Logger.outputFile }}

      Server:
        HostName: "{{ .Values.funnel.Server.HostName }}"
        HTTPPort: "{{ .Values.funnel.Server.HTTPPort }}"
        RPCPort: "{{ .Values.funnel.Server.RPCPort }}"
        DisableHTTPCache: {{ .Values.funnel.Server.DisableHttpCache }}

      RPCClient:
        ServerAddress: {{ .Values.funnel.RPCClient.ServerAddress }}
        Timeout:
          duration: {{ .Values.funnel.RPCClient.Timeout.duration }}
        MaxRetries: {{ .Values.funnel.RPCClient.MaxRetries }}

      Scheduler:
        ScheduleRate: {{ .Values.funnel.Scheduler.ScheduleRate }}
        ScheduleChunk: {{ .Values.funnel.Scheduler.ScheduleChunk }}
        NodePingTimeout:
          duration: {{ .Values.funnel.Scheduler.NodePingTimeout.duration }}
        NodeInitTimeout:
          duration: {{ .Values.funnel.Scheduler.NodeInitTimeout.duration }}

      Node:
        ID: {{ .Values.funnel.Node.Id }}
        Timeout:
          disabled: {{ .Values.funnel.Node.Timeout.disabled }}
        UpdateRate: {{ .Values.funnel.Node.UpdateRate }}
        Resources:
          Cpus: {{ .Values.funnel.Node.Resources.cpus }}
          RamGb: {{ .Values.funnel.Node.Resources.ramGb }}
          DiskGb: {{ .Values.funnel.Node.Resources.diskGb }}

      Worker:
        WorkDir: {{ .Values.funnel.Worker.WorkDir }}
        PollingRate: {{ .Values.funnel.Worker.PollingRate }}
        LogUpdateRate: {{ .Values.funnel.Worker.LogUpdateRate }}
        LogTailSize: {{ .Values.funnel.Worker.LogTailSize }}
        LeaveWorkDir: {{ .Values.funnel.Worker.LeaveWorkDir }}
        MaxParallelTransfers: {{ .Values.funnel.Worker.MaxParallelTransfers }}

      BoltDB:
        Path: {{ .Values.funnel.BoltDB.Path }}

      AmazonS3:
        Disabled: {{ .Values.funnel.AmazonS3.Disabled }}
        AWSConfig:
          MaxRetries: {{ .Values.funnel.AmazonS3.AWSConfig.MaxRetries }}
          Key: {{ .Values.funnel.AmazonS3.AWSConfig.Key }}
          Secret: {{ .Values.funnel.AmazonS3.AWSConfig.Secret }}
        SSE:
          CustomerKeyFile: {{ .Values.funnel.AmazonS3.SSE.CustomerKeyFile }}
          KMSKey: {{ .Values.funnel.AmazonS3.SSE.KMSKey }}

      DynamoDB:
        TableBasename: {{ .Values.funnel.DynamoDB.TableBasename }}
        AWSConfig:
          Region: {{ .Values.funnel.DynamoDB.AWSConfig.Region }}
          Key: {{ .Values.funnel.DynamoDB.AWSConfig.Key }}
          Secret: {{ .Values.funnel.DynamoDB.AWSConfig.Secret }}

      Elastic:
        IndexPrefix: {{ .Values.funnel.Elastic.IndexPrefix }}
        URL: {{ .Values.funnel.Elastic.Url }}

      Datastore:
        Project: {{ .Values.funnel.Datastore.Project }}
        CredentialsFile: {{ .Values.funnel.Datastore.CredentialsFile }}

      MongoDB:
        Addrs:
          {{- if .Values.funnel.MongoDB.Addrs }}
            {{- range .Values.funnel.MongoDB.Addrs }}
          - {{ . }}
            {{- end }}
          {{- else }}
          - {{ .Release.Name }}-mongodb.{{ .Release.Namespace }}.svc.cluster.local
          {{- end }}
        Database: {{ .Values.funnel.MongoDB.Database }}
        Timeout:
          duration: {{ .Values.funnel.MongoDB.Timeout.duration }}
        Username: {{ .Values.funnel.MongoDB.Username }}
        Password: {{ .Values.funnel.MongoDB.Password }}

      Kafka:
        Servers:
        {{- if .Values.funnel.Kafka.Servers }}
        {{- range .Values.funnel.Kafka.Servers }}
        - {{ . }}
        {{- end }}
        {{- else }}
        - ""
        {{- end }}
        Topic: {{ .Values.funnel.Kafka.Topic }}


      GenericS3:
        - Disabled: true
          Endpoint: 
          Key :
          Secret: 
          Bucket: 
          Region: 
          KmsKeyID: 
      Plugins:
        Path: plugin-binaries/auth-plugin
        Params:
          OidcClientId: <redacted>
          OidcClientSecret: <redacted>
          S3Url: gen3-workflow-service.{{ .Release.Namespace }}.svc.cluster.local
          OidcTokenUrl: https://{{ .Values.workflowConfig.hostname }}/user 
{{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: funnel-oidc-client