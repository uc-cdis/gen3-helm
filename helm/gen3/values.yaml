# Default values for gen3.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  # -- (map) AWS configuration
  aws:
    # -- (string) AWS region for this deployment
    region: us-east-1
    # -- (bool) Set to true if deploying to AWS. Controls ingress annotations.
    enabled: false
    # -- (string) Credentials for AWS stuff.
    awsAccessKeyId:
    # -- (string) Credentials for AWS stuff.
    awsSecretAccessKey:
    # -- (map) Service account and AWS role for authentication to AWS Secrets Manager
    secretStoreServiceAccount:
      # -- (bool) Set true if deploying to AWS and want to use service account and IAM role instead of aws keys. Must provide role-arn.
      enabled: false
      # -- (string) Name of the service account to create
      name: secret-store-sa
      # -- (string) AWS Role ARN for Secret Store to use
      roleArn:
    # -- (map) Local secret setting if using a pre-exising secret.
    useLocalSecret:
      # -- (bool) Set to true if you would like to use a secret that is already running on your cluster.
      enabled: false
      # -- (string) Name of the local secret.
      localSecretName:
  # -- (bool) Deploys postgres/elasticsearch for dev
  dev: true
  postgres:
    # -- (bool) Whether the database create job should run.
    dbCreate: true
    master:
      # -- global postgres master username
      username: postgres
      # -- global postgres master password
      password:
      # -- global postgres master host
      host:
      # -- global postgres master port
      port: "5432"
  # -- (string) Environment name.
  # This should be the same as vpcname if you're doing an AWS deployment.
  # Currently this is being used to share ALB's if you have multiple namespaces in same cluster.
  environment: default
  # -- (string) Hostname for the deployment.
  hostname: localhost
  # -- (string) ARN of the reverse proxy certificate.
  revproxyArn: arn:aws:acm:us-east-1:123456:certificate
  # -- (string) URL of the data dictionary.
  dictionaryUrl: https://s3.amazonaws.com/dictionary-artifacts/datadictionary/develop/schema.json
  # -- (string) Portal application name.
  portalApp: gitops
  # -- (bool) Whether public datasets are enabled.
  publicDataSets: true
  # -- (string) Access level for tiers. acceptable values for `tier_access_level` are: `libre`, `regular` and `private`. If omitted, by default common will be treated as `private`
  tierAccessLevel: libre
  # -- (int) Only relevant if tireAccessLevel is set to "regular". Summary charts below this limit will not appear for aggregated data.
  tierAccessLimit: "1000"
  # -- (bool) Global flags to control and manage network policies for a Gen3 installation
  # NOTE: Network policies are currently a beta feature. Use with caution!
  netPolicy:
    # -- (bool) Whether network policies are enabled
    enabled: false

    # -- (array) A CIDR range representing a database subnet, that services with a database need access to
    dbSubnet: ""
  # -- (int) Number of dispatcher jobs.
  dispatcherJobNum: "10"
  # -- (map) If you would like to add any extra values to the manifest-global configmap.
  manifestGlobalExtraValues: {}
  # -- (string) Which app will be served on /. Needs be set to portal for portal, or "gen3ff" for frontendframework.
  frontendRoot: "portal"
  # -- (map) External Secrets settings.
  externalSecrets:
    # -- (bool) Will use ExternalSecret resources to pull secrets from Secrets Manager instead of creating them locally. Be cautious as this will override secrets you have deployed.
    deploy: false
    # -- (bool) Will create the databases and store the creds in Kubernetes Secrets even if externalSecrets is deployed. Useful if you want to use ExternalSecrets for other secrets besides db secrets.
    dbCreate: false

# Dependancy Charts

ambassador:
  # -- (bool) Whether to deploy the ambassador subchart.
  enabled: true

arborist:
  # -- (bool) Whether to deploy the arborist subchart.
  enabled: true

argo-wrapper:
  # -- (bool) Whether to deploy the argo-wrapper subchart.
  enabled: false

audit:
  # -- (bool) Whether to deploy the audit subchart.
  enabled: true

aws-es-proxy:
  # -- (bool) Whether to deploy the aws-es-proxy subchart.
  enabled: false
  # -- (str) Elasticsearch endpoint in AWS
  esEndpoint: test.us-east-1.es.amazonaws.com
  # -- (map) Secret information
  secrets:
    # -- (str) AWS access key ID for aws-es-proxy
    awsAccessKeyId: ""
    # -- (str) AWS secret access key for aws-es-proxy
    awsSecretAccessKey: ""

etl:
  # -- (bool) Whether to deploy the etl subchart.
  enabled: true

fence:
  # -- (bool) Whether to deploy the fence subchart.
  enabled: true
  # -- (map) Configuration options for usersync cronjob.
  usersync:
    # -- (bool) Whether to run Fence usersync or not.
    usersync: false
    # -- (string) The cron schedule expression to use in the usersync cronjob. Runs every 30 minutes by default.
    schedule: "*/30 * * * *"
    # -- (bool) Whether to sync data from dbGaP.
    syncFromDbgap: false
    # -- (bool) Force attempting a dbgap sync if "true", falls back on user.yaml
    addDbgap: false
    # -- (bool) Forces ONLY a dbgap sync if "true", IGNORING user.yaml
    onlyDbgap: false
    # -- (string) Path to the user.yaml file in S3.
    userYamlS3Path: s3://cdis-gen3-users/helm-test/user.yaml
    # -- (string) Slack webhook endpoint used with certain jobs.
    slack_webhook: None
    # -- (bool) Will echo what files we are seeing on dbgap ftp to Slack.
    slack_send_dbgap: false

# -- (map) Configurations for frontend-framework chart.
frontend-framework:
  # -- (bool) Whether to deploy the frontend-framework subchart.
  enabled: false
  # -- (map) Docker image information.
  image:
    # -- (string) The Docker image repository for the frontend-framework.
    repository: "quay.io/cdis/frontend-framework"
    # -- (string) Overrides the image tag whose default is the chart appVersion.
    tag: "develop"

# -- (map) Configurations for guppy chart.
guppy:
  # -- (bool) Whether to deploy the guppy subchart.
  enabled: false

hatchery:
  # -- (bool) Whether to deploy the hatchery subchart.
  enabled: true

  hatchery:
    sidecarContainer:
      # -- (string) The maximum amount of CPU the sidecar container can use
      cpu-limit: "0.1"
      # -- (string) The maximum amount of memory the sidecar container can use
      memory-limit: 256Mi
      # -- (string) The sidecar image.
      image: quay.io/cdis/ecs-ws-sidecar:master
      # -- (map) Environment variables to pass to the sidecar container
      env:
        NAMESPACE: "{{ .Release.Namespace }}"
        HOSTNAME: "{{ .Values.global.hostname }}"
      # -- (list) Arguments to pass to the sidecare container.
      args: []
      # -- (list) Commands to run for the sidecar container.
      command:
        - "/bin/bash"
        - "./sidecar.sh"
      lifecycle-pre-stop:
        - su
        - "-c"
        - echo test
        - "-s"
        - "/bin/sh"
        - root
    containers:
      -  # -- (int) port to proxy traffic to in docker contaniner
        target-port: 8888
        # -- (string) cpu limit of workspace container
        cpu-limit: "1.0"
        # -- (string) memory limit of workspace container
        memory-limit: 2Gi
        # -- (string) name of workspace
        name: "(Tutorials) Example Analysis Jupyter Lab Notebooks"
        # -- (string) docker image for workspace
        image: quay.io/cdis/heal-notebooks:combined_tutorials__latest
        # -- environment variables for workspace container
        env:
          FRAME_ANCESTORS: https://{{ .Values.global.hostname }}
        args:
          - "--NotebookApp.base_url=/lw-workspace/proxy/"
          - "--NotebookApp.default_url=/lab"
          - "--NotebookApp.password=''"
          - "--NotebookApp.token=''"
          - "--NotebookApp.shutdown_no_activity_timeout=5400"
          - "--NotebookApp.quit_button=False"
        command:
          - start-notebook.sh
        path-rewrite: "/lw-workspace/proxy/"
        use-tls: "false"
        ready-probe: "/lw-workspace/proxy/"
        lifecycle-post-start:
          - "/bin/sh"
          - "-c"
          - export IAM=`whoami`; rm -rf /home/$IAM/pd/dockerHome; rm -rf /home/$IAM/pd/lost+found;
            ln -s /data /home/$IAM/pd/; true
        user-uid: 1000
        fs-gid: 100
        user-volume-location: "/home/jovyan/pd"
        gen3-volume-location: "/home/jovyan/.gen3"

indexd:
  # -- (bool) Whether to deploy the indexd subchart.
  enabled: true
  # -- (string) the default prefix for indexd records
  defaultPrefix: "PREFIX/"

manifestservice:
  # -- (bool) Whether to deploy the manifest service subchart.
  enabled: true

metadata:
  # -- (bool) Whether to deploy the metadata subchart.
  enabled: true

peregrine:
  # -- (bool) Whether to deploy the peregrine subchart.
  enabled: true

pidgin:
  # -- (bool) Whether to deploy the pidgin subchart.
  enabled: false

portal:
  # -- (bool) Whether to deploy the portal subchart.
  enabled: true

requestor:
  # -- (bool) Whether to deploy the requestor subchart.
  enabled: false

revproxy:
  # -- (bool) Whether to deploy the revproxy subchart.
  enabled: true

  ingress:
    # -- (bool) Whether to create the custom revproxy ingress
    enabled: false
    # -- (map) Annotations to add to the ingress.
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    # -- (list) Where to route the traffic.
    hosts:
      - host: chart-example.local
    # -- (list) To secure an Ingress by specifying a secret that contains a TLS private key and certificate.
    tls: []

sheepdog:
  # -- (bool) Whether to deploy the sheepdog subchart.
  enabled: true

ssjdispatcher:
  # -- (bool) Whether to deploy the ssjdispatcher subchart.
  enabled: false

wts:
  # -- (bool) Whether to deploy the wts subchart.
  enabled: true

# -- (map) To configure postgresql subchart
# Disable persistence by default so we can spin up and down ephemeral environments
postgresql:
  primary:
    persistence:
      # -- (bool) Option to persist the dbs data.
      enabled: false

elasticsearch:
  clusterName: gen3-elasticsearch
  maxUnavailable: 0
  singleNode: true
  replicas: 1
  clusterHealthCheckParams: "wait_for_status=yellow&timeout=1s"
  esConfig:
    elasticsearch.yml: |
      # Here we can add elasticsearch config

# (optional) NeuVector Kubernetes Security Policy templates to protect Gen3
#   NeuVector must be installed separately.
#   Reference: https://open-docs.neuvector.com/basics/overview
#   Reference: https://github.com/neuvector/neuvector-helm
# For more information, please use the Gen3 community Slack.
neuvector:
  # install Neuvector
  enabled: false
  policies:
    # deploy predefined Neuvector policies for Gen3
    include: false
    # Discover, Monitor, or Protect
    policyMode: Monitor
  # Configure your ingress controller information for enabling ingress to containers
  ingress:
    # service name of your ingress controller
    controller: nginx-ingress-controller
    # installation namespace of your ingress controller
    namespace: nginx
    # classname of your ingress
    class: nginx
  # Required to allow egress to in-cluster database or external, managed database
  DB_HOST: development-gen3-postgresql
  # hostname/service name for our ElasitcSearch instance, used to allow egress from containers
  ES_HOST: gen3-elasticsearch-master

# -- (map) Secret information for External Secrets and DB Secrets.
secrets:
  # -- (str) AWS access key ID. Overrides global key.
  awsAccessKeyId:
  # -- (str) AWS secret access key ID. Overrides global key.
  awsSecretAccessKey: