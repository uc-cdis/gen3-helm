{{- if .Values.usersync.usersync -}}
#
# run with:
# gen3 job run usersync
#
# Optional Arguments:
#     ADD_DBGAP Force attempting a dbgap sync if "true", falls back on user.yaml
#               by defualt. i.e. this isn't required for a dbGaP sync to happen
#               default: "false" - fall back on user.yaml
#
#     ONLY_DBGAP Forces ONLY a dbgap sync if "true", IGNORING user.yaml
#                default: "false"
#
apiVersion: batch/v1
kind: CronJob
metadata:
  name: usersync
spec:
  schedule: {{ .Values.usersync.schedule | quote }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: gen3job
        spec:
          serviceAccountName: usersync-job
          volumes:
            - name: user-yaml
              configMap:
                name: useryaml
                items:
                  - key: useryaml
                    path: user.yaml
            - name: config-volume
              secret:
                secretName: "fence-config"
            - name: creds-volume
              secret:
                secretName: "fence-creds"
            - name: projects
              configMap:
                name: "projects"
                optional: true
            - name: fence-google-app-creds-secret-volume
              secret:
                secretName: "fence-google-app-creds-secret"
            - name: fence-google-storage-creds-secret-volume
              secret:
                secretName: "fence-google-storage-creds-secret"
            - name: shared-data
              emptyDir: {}
            - name: cred-volume
              secret:
              {{- if .Values.global.aws.useLocalSecret.enabled }}
                secretName: {{ .Values.global.aws.useLocalSecret.localSecretName }}
              {{- else }}
                secretName: {{.Chart.Name}}-aws-config
              {{- end }}
          initContainers:
            - name: wait-for-fence
              image: curlimages/curl:latest
              command: ["/bin/sh","-c"]
              args: ["while [ $(curl -sw '%{http_code}' http://fence-service -o /dev/null) -ne 200 ]; do sleep 5; echo 'Waiting for fence...'; done"]
            - name: awshelper
              image: {{ .Values.usersync.custom_image | default "quay.io/cdis/awshelper:master" }}
              imagePullPolicy: Always
              env:
              - name: gen3Env
                valueFrom:
                    configMapKeyRef:
                      name: manifest-global
                      key: hostname
              - name: userYamlS3Path
                value: {{ .Values.usersync.userYamlS3Path | quote }}
              - name: slackWebHook
                value: {{ .Values.usersync.slack_webhook | quote }}
              volumeMounts:
                - name: user-yaml
                  mountPath: /var/www/fence
                - name: shared-data
                  mountPath: /mnt/shared
                - name: cred-volume
                  mountPath: "/home/ubuntu/.aws/credentials"
                  subPath: credentials
              command: ["/bin/bash" ]
              args:
                - "-c"
                - |
                  GEN3_HOME=/home/ubuntu/cloud-automation
                  source "${GEN3_HOME}/gen3/lib/utils.sh"
                  gen3_load "gen3/gen3setup"

                  if [ "${userYamlS3Path}" = 'none' ]; then
                    echo "using local user.yaml"
                    cp /var/www/fence/user.yaml /mnt/shared/user.yaml
                  else
                    # -----------------
                    echo "awshelper downloading ${userYamlS3Path} to /mnt/shared/user.yaml"
                    n=0
                    until [ $n -ge 5 ]; do
                      echo "Download attempt $n"
                      aws s3 cp "${userYamlS3Path}" /mnt/shared/user.yaml && break
                      n=$[$n+1]
                      sleep 2
                    done
                  fi
                  if [[ ! -f /mnt/shared/user.yaml ]]; then
                    echo "awshelper failed to retrieve /mnt/shared/user.yaml"
                    exit 1
                  fi
                  #-----------
                  echo "awshelper updating etl configmap"
                  if ! gen3 gitops etl-convert < /mnt/shared/user.yaml > /tmp/user.yaml; then
                    echo "ERROR: failed to generate ETL config"
                    exit 1
                  fi
                  # kubectl delete configmap fence > /dev/null 2>&1
                  # kubectl create configmap fence --from-file=/tmp/user.yaml
                  if [ "${slackWebHook}" != 'None' ]; then
                    curl -X POST --data-urlencode "payload={\"text\": \"AWSHelper: Syncing users on ${gen3Env}\"}" "${slackWebHook}"
                  fi
                  echo "Helper exit ok"
          containers:
          - name: usersync
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
            imagePullPolicy: Always
            env:
            - name: SYNC_FROM_DBGAP
              value: {{ .Values.usersync.syncFromDbgap | quote }}
            - name: ADD_DBGAP
              value: {{ .Values.usersync.addDbgap | quote }}
            - name: ONLY_DBGAP
              value: {{ .Values.usersync.onlyDbgap | quote }}
            - name: SLACK_SEND_DBGAP
              value: {{ .Values.usersync.slack_send_dbgap | quote }}
            - name: slackWebHook
              value: {{ .Values.usersync.slack_webhook | quote }}
            {{- toYaml .Values.env | nindent 12 }}
            volumeMounts:
              - name: shared-data
                mountPath: /mnt/shared
              - name: "config-volume"
                readOnly: true
                mountPath: "/var/www/fence/fence-config.yaml"
                subPath: fence-config.yaml
              - name: "creds-volume"
                readOnly: true
                mountPath: "/var/www/fence/creds.json"
                subPath: creds.json
              - name: "projects"
                mountPath: "/var/www/fence/projects.yaml"
                subPath: "projects.yaml"
              - name: "fence-google-app-creds-secret-volume"
                readOnly: true
                mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
                subPath: fence_google_app_creds_secret.json
              - name: "fence-google-storage-creds-secret-volume"
                readOnly: true
                mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
                subPath: fence_google_storage_creds_secret.json
            command: ["/bin/bash" ]
            args:
              - "-c"
              # Script always succeeds if it runs (echo exits with 0)
              - |
                echo 'options use-vc' >> /etc/resolv.conf
                # pip3 install SQLAlchemy==1.3.6
                # can be removed once this is merged: https://github.com/uc-cdis/fence/pull/1096
                if [[ "$SYNC_FROM_DBGAP" != "true" && "$ADD_DBGAP" != "true" ]]; then
                  if [[ -f /mnt/shared/user.yaml ]]; then
                    echo "running fence-create"
                    time fence-create sync --arborist http://arborist-service --yaml /mnt/shared/user.yaml
                  else
                    echo "/mnt/shared/user.yaml did not appear within timeout :-("
                    false  # non-zero exit code
                  fi
                  exitcode=$?
                else
                  output=$(mktemp "/tmp/fence-create-output_XXXXXX")
                  if [[ -f /mnt/shared/user.yaml && "$ONLY_DBGAP" != "true" ]]; then
                    echo "Running fence-create dbgap-sync with user.yaml - see $output"
                    time fence-create sync --arborist http://arborist-service --sync_from_dbgap "True" --projects /var/www/fence/projects.yaml --yaml /mnt/shared/user.yaml 2>&1 | tee "$output"
                  else
                    echo "Running fence-create dbgap-sync without user.yaml - see $output"
                    time fence-create sync --arborist http://arborist-service --sync_from_dbgap "True" --projects /var/www/fence/projects.yaml 2>&1 | tee "$output"
                  fi
                  exitcode="${PIPESTATUS[0]}"
                  echo "$output"
                  # Echo what files we are seeing on dbgap ftp to Slack
                  # We only do this step every 12 hours and not on weekends to reduce noise
                  if [[ -n "$SLACK_SEND_DBGAP" && "$SLACK_SEND_DBGAP" = "true" ]]; then
                    files=$(grep "Reading file" "$output")
                    let hour=$(date -u +10#%H)
                    let dow=$(date -u +10#%u)
                    if ! (( hour % 12 )) && (( dow < 6 )); then
                      if [ "${slackWebHook}" != 'None' ]; then
                        curl -X POST --data-urlencode "payload={\"text\": \"FenceHelper: \n\`\`\`\n${files}\n\`\`\`\"}" "${slackWebHook}"
                      fi
                    fi
                  fi
                fi
                if [[ $exitcode -ne 0 && "${slackWebHook}" != 'None' ]]; then
                  emptyfile=$(grep "EnvironmentError:" "$output")
                  if [ ! -z "$emptyfile" ]; then
                    curl -X POST --data-urlencode "payload={\"text\": \"JOBSKIPPED: User sync skipped on ${gen3Env} ${emptyfile}\"}" "${slackWebHook}";
                  else
                    curl -X POST --data-urlencode "payload={\"text\": \"JOBFAIL: User sync failed on ${gen3Env}\"}" "${slackWebHook}"
                  fi
                fi
                echo "Exit code: $exitcode"
                exit "$exitcode"
          restartPolicy: "Never"
{{- end }}