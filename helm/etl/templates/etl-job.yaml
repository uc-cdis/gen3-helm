apiVersion: batch/v1
kind: CronJob
metadata:
  name: etl-cronjob
spec:
  schedule: "0 0 1 1 */5"
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          {{- with .Values.podAnnotations }}
          annotations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          labels:
            app: gen3job
        spec:
          shareProcessNamespace: true
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  preference:
                    matchExpressions:
                      - key: karpenter.sh/capacity-type
                        operator: In
                        values:
                          - on-demand
                - weight: 99
                  preference:
                    matchExpressions:
                      - key: eks.amazonaws.com/capacityType
                        operator: In
                        values:
                          - ONDEMAND
          volumes:
            - name: signal-volume
              emptyDir: {}
            - name: creds-volume
              secret:
                secretName: "peregrine-dbcreds"
            - name: etl-mapping
              configMap:
                name: etl-mapping
            - name: fence-yaml
              configMap:
                name: useryaml
          containers:
            - name: gen3-spark
              image: {{ .Values.image.spark.repository }}:{{ .Values.image.spark.tag }}
              ports:
              - containerPort: 22
              - containerPort: 9000
              - containerPort: 8030
              - containerPort: 8031
              - containerPort: 8032
              - containerPort: 7077
              readinessProbe:
                tcpSocket:
                  port: 9000
                initialDelaySeconds: 10
                periodSeconds: 30
              env:
              - name: DICTIONARY_URL
                valueFrom:
                  configMapKeyRef:
                    name: manifest-global
                    key: dictionary_url
              - name: HADOOP_URL
                value: hdfs://0.0.0.0:9000
              - name: HADOOP_HOST
                value: 0.0.0.0
              volumeMounts:
                - mountPath: /usr/share/pod
                  name: signal-volume
                  readOnly: true
              imagePullPolicy: {{ .Values.image.spark.pullPolicy }}
              resources:
                requests:
                  cpu: {{  .Values.resources.spark.requests.cpu }}
                  memory: {{ .Values.resources.spark.requests.memory }}
                # limits:
                #   cpu: {{ .Values.resources.spark.limits.cpu }}
                #   memory: {{ .Values.resources.spark.limits.memory }}
              command: ["/bin/bash" ]
              args: 
                - "-c"
                - |
                  trap 'exit 0' SIGINT SIGQUIT SIGTERM
                  # get /usr/local/share/ca-certificates/cdis-ca.crt into system bundle
                  ssh server sudo /etc/init.d/ssh start
                  # update-ca-certificates
                  python run_config.py
                  hdfs namenode -format
                  hdfs --daemon start namenode
                  hdfs --daemon start datanode
                  yarn --daemon start resourcemanager
                  yarn --daemon start nodemanager
                  hdfs dfsadmin -safemode leave
                  hdfs dfs -mkdir /result
                  hdfs dfs -mkdir /jars
                  hdfs dfs -mkdir /archive
                  /spark/sbin/start-all.sh
                  while true; do sleep 5; done
            - name: tube
              imagePullPolicy: IfNotPresent
              # image: quay.io/cdis/tube:feat_helm_test
              image: {{ .Values.image.tube.repository }}:{{ .Values.image.tube.tag }}
              ports:
                - containerPort: 80
              env:
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: peregrine-dbcreds
                      key: host
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: sheepdog-dbcreds
                      key: database
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: sheepdog-dbcreds
                      key: username
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: sheepdog-dbcreds
                      key: password
                - name: DB_PORT
                  valueFrom:
                    secretKeyRef:
                      name: sheepdog-dbcreds
                      key: port
                - name: DICTIONARY_URL
                  valueFrom:
                    configMapKeyRef:
                      name: manifest-global
                      key: dictionary_url
                - name: HADOOP_URL
                  value: hdfs://localhost:9000
                - name: ES_URL
                  value: {{ .Values.esEndpoint  }}
                - name: HADOOP_HOST
                  value: localhost
                - name: HADOOP_CLIENT_OPTS
                  value: -Xmx1g
                - name: SPARK_EXECUTOR_MEMORY
                  value: 4g
                - name: SPARK_DRIVER_MEMORY
                  value: 6g
                - name: ETL_FORCED
                  value: "TRUE"
                - name: gen3Env
                  valueFrom:
                    configMapKeyRef:
                      name: manifest-global
                      key: hostname
                - name: slackWebHook
                  valueFrom:
                    configMapKeyRef:
                      name: global
                      key: slack_webhook
                      optional: true
              volumeMounts:
                # - name: "creds-volume"
                #   readOnly: true
                #   mountPath: "/gen3/tube/creds.json"
                #   subPath: creds.json
                # Volume to signal when to kill spark
                - mountPath: /usr/share/pod
                  name: signal-volume
                - name: "etl-mapping"
                  readOnly: true
                  mountPath: "/gen3/tube/etlMapping.yaml"
                  subPath: "etlMapping.yaml"
                - name: "fence-yaml"
                  readOnly: true
                  mountPath: "/gen3/tube/user.yaml"
                  subPath: useryaml
              resources:
                requests:
                  cpu: {{  .Values.resources.tube.requests.cpu }}
                  memory: {{ .Values.resources.tube.requests.memory }}
                # limits:
                #   cpu: {{ .Values.resources.tube.limits.cpu }}
                #   memory: {{ .Values.resources.tube.limits.memory }}
              command: ["/bin/bash"]
              args:
                - "-c"
                - |
                  while ! bash -c "echo >/dev/tcp/localhost/9000"; do
                    echo "Spark is not ready on port 9000... waiting for 10 seconds."
                    sleep 10
                  done

                  # Port 9000 is open, continue with the rest of the script
                  echo "Port 9000 is now open. Continuing with the script..."

                  echo "python run_config.py && python run_etl.py"
                  python run_config.py && python run_etl.py
                  exitcode=$?
                  
                  # Kill sidecar and all processes
                  echo "Exit code: $exitcode"
                  pkill -u root && exit $exitcode
                  exit "$exitcode" &
          restartPolicy: Never