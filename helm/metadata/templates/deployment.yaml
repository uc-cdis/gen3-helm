apiVersion: apps/v1
kind: Deployment
metadata:
  name: metadata-deployment
  labels:
    {{- include "metadata.labels" . | nindent 4 }}
    {{- if .Values.global.ddEnabled }}
    {{- include "common.datadogLabels" . | nindent 4 }}
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "metadata.selectorLabels" . | nindent 6 }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- with .Values.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        {{- include "metadata.selectorLabels" . | nindent 8 }}
        # gen3 networkpolicy labels
        netnolimit: 'yes'
        public: 'yes'
        userhelper: 'yes'
        {{- if .Values.global.ddEnabled }}
        {{- include "common.datadogLabels" . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      volumes: 
        - name: config-volume-g3auto
          secret:
            secretName: metadata-g3auto
        - name: config-volume
          secret:
            secretName: metadata-config
            optional: true
        - name: config-manifest
          configMap:
            name: manifest-metadata
            optional: true
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          env: 
            {{- if .Values.global.ddEnabled }}
            {{- include "common.datadogEnvVar" . | nindent 12 }}
            {{- end }}
            - name: GEN3_DEBUG
              value: "False"
            - name: GEN3_ES_ENDPOINT
              value: {{ .Values.esEndpoint }}
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: host
                  optional: false  
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: username
                  optional: false
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: password
                  optional: false
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: database
                  optional: false
            - name: DBREADY
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: dbcreated
                  optional: false
            {{- with .Values.useAggMds }}
            - name: USE_AGG_MDS
              value: {{ . }}
            {{- end }}
            {{- with .Values.aggMdsNamespace}}
            - name: AGG_MDS_NAMESPACE
              value: {{ . }}
            {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /_status
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /_status
              port: 80
          ports:
            - containerPort: 80
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      initContainers:
        - name: {{ .Values.initContainerName }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.initVolumeMounts }}
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: host
                  optional: false  
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: username
                  optional: false
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: password
                  optional: false
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: database
                  optional: false
            - name: DBREADY
              valueFrom:
                secretKeyRef:
                  name: metadata-dbcreds
                  key: dbcreated
                  optional: false
          volumeMounts:
            {{- toYaml . | nindent 10 }}
          {{- end }}
          {{- with .Values.initResources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command: {{ .Values.command }}
          {{- with .Values.args }}
          args: 
            {{- toYaml . | nindent 12}}
          {{- end }}