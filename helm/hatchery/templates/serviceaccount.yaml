apiVersion: v1
kind: ServiceAccount
metadata:
  name: hatchery-service-account
  {{- if .Values.global.crossplane.enabled }}
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::{{ .Values.global.crossplane.accountId }}:role/{{ .Values.global.environment }}-{{ .Release.Namespace }}-{{ include "hatchery.serviceAccountName" . }}
  {{- else }}
  {{- if .Values.global.aws.enabled }}
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::{{ .Values.global.aws.account }}:role/{{ .Values.global.aws.hatchery_role }}
  {{- end }}
  {{- end }}  
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hatchery-binding
subjects:
- kind: ServiceAccount
  name: hatchery-service-account
  apiGroup: ""
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hatchery-clusterrolebinding-{{ .Release.Namespace }}
  namespace: {{ include "hatchery.jupyterNamespace" . }}
subjects:
- kind: ServiceAccount
  name: hatchery-service-account
  apiGroup: ""
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io
---
# For hatchery to be able to provision s3 persistent-volume
# the admin role does not give this right, as it's namespace scoped (not clusteradmin)
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hatchery-pv-clusterrolebinding-{{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: hatchery-service-account
  apiGroup: ""
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: system:persistent-volume-provisioner
  apiGroup: rbac.authorization.k8s.io