{{- if and (.Values.cedar_client_job_enabled) (.Values.externalSecrets.createCedarClientSecret) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: cedar-client-job
spec:
  template:
    metadata:
      labels:
        app: gen3job
    spec:
      restartPolicy: OnFailure
      serviceAccountName: cedar-secrets
      volumes:
        - name: config-volume
          secret:
            secretName: "fence-config"
        - name: shared-volume
          emptyDir: {}
      initContainers:
        - name: wait-for-fence
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c"]
          args: ["while [ $(curl -sw '%{http_code}' http://fence-service -o /dev/null) -ne 200 ]; do sleep 5; echo 'Waiting for fence...'; done"]
      containers:
        - name: fence-client
          # TODO: Make this configurable
          image: "quay.io/cdis/fence:master"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # TODO: ADD RESOURCES
          # resources:
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              secrets=$(fence-create client-create --client cedar_ingest_client --grant-types client_credentials | tail -1)
              if [[ ! $secrets =~ (\'(.*)\', \'(.*)\') ]]; then
                echo "Failed generating client for cedar_ingest_client"
                exit 1
              fi
              client_id="${BASH_REMATCH[2]}"
              client_secret="${BASH_REMATCH[3]}"
              echo client_id: $client_id
              echo client_secret: $client_secret
              echo -n $client_id > /shared/client_id
              echo -n $client_secret > /shared/client_secret
          env:
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: fence-dbcreds
                  key: host
                  optional: false  
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: fence-dbcreds
                  key: username
                  optional: false 
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: fence-dbcreds
                  key: password
                  optional: false
            - name: PGDB
              valueFrom:
                secretKeyRef:
                  name: fence-dbcreds
                  key: database
                  optional: false
            - name: DB
              value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDB)
            - name: PYTHONPATH
              value: /var/www/fence
            - name: FENCE_PUBLIC_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: manifest-fence
                  key: fence-config-public.yaml
                  optional: true
          volumeMounts:
            - name: "shared-volume"
              mountPath: "/shared"
            - name: "config-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence-config.yaml"
              subPath: fence-config.yaml
        - name: kubectl
          #TODO: Make this configurable?  
          image: bitnami/kubectl:latest
          volumeMounts:
            - name: "shared-volume"
              mountPath: "/shared"
          command: ["/bin/bash"]
          args: 
            - "-c"
            - |
              echo "waiting for /shared/client_id"
              while [ ! -e /shared/client_id ]
              do
                echo "..."
                sleep 5
              done
              echo "Updating k8s secret cedar-g3auto"
              CLIENT_ID=$(cat /shared/client_id | base64)
              CLIENT_SECRET=$(cat /shared/client_secret | base64)
              kubectl patch secret/cedar-g3auto --patch="{\"data\":{\"client_secret\":\"${CLIENT_SECRET}\", \"client_id\":\"${CLIENT_ID}\"}}"
{{- end }}