apiVersion: apps/v1
kind: Deployment
metadata:
  name: wts-deployment
  labels:
    {{- include "wts.labels" . | nindent 4 }}
    {{- if .Values.global.ddEnabled }}
    {{- include "common.datadogLabels" . | nindent 4 }}
    {{- end }}
  annotations:
    gen3.io/network-ingress: "mariner"
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "wts.selectorLabels" . | nindent 6 }}
      release: {{ .Values.release }}
  revisionHistoryLimit: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "wts.selectorLabels" . | nindent 8 }}
        public: "yes"
        netnolimit: "yes"
        userhelper: "yes"
        {{- if .Values.global.ddEnabled }}
        {{- include "common.datadogLabels" . | nindent 8 }}
        {{- end }}
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - wts
              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 10
      volumes:
        - name: wts-secret
          secret:
            secretName: "wts-g3auto"
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: workspace-token-service
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
          - name: "wts-secret"
            readOnly: true
            mountPath: "/var/www/wts/appcreds.json"
            subPath: appcreds.json
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /_status
              port: 80
            failureThreshold: 10
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /_status
              port: 80
          env:
          {{- if .Values.global.ddEnabled }}
          {{- include "common.datadogEnvVar" . | nindent 11 }}
          {{- end }}
          - name: OIDC_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: wts-oidc-client
                key: client_id
                optional: false
          - name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: wts-oidc-client
                key: client_secret
                optional: false
          - name: SECRET_CONFIG
            value: "/var/www/wts/appcreds.json"
          - name: AUTH_PLUGINS
            value: k8s
          - name: PGHOST
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-dbcreds
                key: host
                optional: false  
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-dbcreds
                key: username
                optional: false 
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-dbcreds
                key: password
                optional: false
          - name: PGDB
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-dbcreds
                key: database
                optional: false
          - name: DBREADY
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}-dbcreds
                key: dbcreated
                optional: false
          - name: SQLALCHEMY_DATABASE_URI
            value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDB)
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      initContainers:
      - name: wts-db-migrate
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
        - name: "wts-secret"
          readOnly: true
          mountPath: "/var/www/wts/appcreds.json"
          subPath: appcreds.json
        env:
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-dbcreds
              key: host
              optional: false  
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-dbcreds
              key: username
              optional: false 
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-dbcreds
              key: password
              optional: false
        - name: PGDB
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-dbcreds
              key: database
              optional: false
        - name: DBREADY
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-dbcreds
              key: dbcreated
              optional: false
        - name: SQLALCHEMY_DATABASE_URI
          value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):5432/$(PGDB)
        - name: SECRET_CONFIG
          value: "/var/www/wts/appcreds.json"
        resources:
          limits:
            cpu: 0.8
            memory: 512Mi
        command: ["/bin/sh"]
        args:
          - "-c"
          - |
            if hash alembic 2>/dev/null; then
              echo "Running DB migration"
              cd /wts
              alembic upgrade head
            else
              echo "Alembic not installed - not running DB migration"
            fi
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

