apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app: gen3job
  name: aws-batch-replication
  namespace: binamb-helm
spec:
  schedule: "0 * * * *"
  suspend: true
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: gen3job
            batch.kubernetes.io/job-name: aws-batch-replication
            job-name: aws-batch-replication
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: karpenter.sh/capacity-type
                    operator: In
                    values:
                    - on-demand
                weight: 100
              - preference:
                  matchExpressions:
                  - key: eks.amazonaws.com/capacityType
                    operator: In
                    values:
                    - ONDEMAND
                weight: 99
          containers:
          - args:
            - -c
            - |
              #python batch_jobs/bucket_replicate/dcf_replication.py
              sleep infinity
              #python batch_jobs/bin/run_bucket_replicate_job.py replicate-bucket --source_bucket $SOURCE_BUCKET --destination_bucket $DESTINATION_BUCKET --job_queue ${JOB_QUEUE} --job_definition ${JOB_DEFINITION}
              echo "All done - exit status $?"
            command:
            - /bin/bash
            env:
            - name: REGION
              value: us-east-1
            - name: SOURCE_BUCKET
              value: kube-emalinowskiv1-gen3
            - name: DESTINATION_BUCKET
              value: manifestservice-emalinowskiv1-test
            - name: JOB_QUEUE
              value: binamb-planx-pla-net-bucket-replicate-jqhu_queue_job
            - name: JOB_DEFINITION
              value: binamb-planx-pla-net-bucket-replicate-jqhu-batch_job_definition
            image: quay.io/cdis/bucket-replicate:test_basic_batch_test
            imagePullPolicy: Always
            name: aws-bucket-replicate
            ports:
            - containerPort: 80
              protocol: TCP
            resources:
              limits:
                cpu: "1"
                memory: 1Gi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /bucket-replicate/creds.json
              name: cred-volume
              subPath: creds.json
            - name: "setting-volume"
              mountPath: "/secrets/dcf_dataservice_settings"
              subPath: "dcf_dataservice_settings"
            - name: "creds-json-volume"
              mountPath: "/secrets/dcf_dataservice_credentials.json"
              subPath: "dcf_dataservice_credentials.json"
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: binamb-planx-pla-net-bucket-replicate-jqhu-sa
          serviceAccountName: binamb-planx-pla-net-bucket-replicate-jqhu-sa
          terminationGracePeriodSeconds: 30
          volumes:
          - name: cred-volume
            secret:
              defaultMode: 420
              secretName: bucketreplicate-g3auto
          - name: setting-volume
            secret:
              secretName: "dcf-dataservice-settings-secrets"
          - name: project-map-volume
            configMap:
              name: project-map-manifest
          - name: creds-json-volume
            secret:
              secretName: "dcf-dataservice-json-secret"