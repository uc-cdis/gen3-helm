{{- if .Values.awsBatchReplicationJob.enabled -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app: gen3job
  name: aws-batch-replication
  namespace: binamb-helm
spec:
  schedule: "0 * * * *"
  suspend: true
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: gen3job
            batch.kubernetes.io/job-name: aws-batch-replication
            job-name: aws-batch-replication
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: karpenter.sh/capacity-type
                    operator: In
                    values:
                    - on-demand
                weight: 100
              - preference:
                  matchExpressions:
                  - key: eks.amazonaws.com/capacityType
                    operator: In
                    values:
                    - ONDEMAND
                weight: 99
          containers:
          - args:
            - -c
            - |
              echo """
              [default]
              region: us-east-1
              """ > ~/.aws/config
              # #python batch_jobs/bucket_replicate/dcf_replication.py
              sleep infinity
              # #python batch_jobs/bin/run_bucket_replicate_job.py replicate-bucket --source_bucket $SOURCE_BUCKET --destination_bucket $DESTINATION_BUCKET --job_queue ${JOB_QUEUE} --job_definition ${JOB_DEFINITION}
              # echo "All done - exit status $?"
              # python3 batch_jobs/bin/run_bucket_replicate_job.py replicate-bucket --source_bucket test-gdc-bucket --destination_bucket manifestservice-emalinowskiv1-test --job_queue binamb-planx-pla-net-bucket-replicate-jqhu_queue_job --job_definition binamb-planx-pla-net-bucket-replicate-jqhu-batch_job_definition
              python3 batch_jobs/bin/run_dcf_replication_job.py dcf_replication --manifest_path s3://test-data-replication-manifest/GDC_only_3plusgig_open_active_manifest.tsv --job_queue binamb-planx-pla-net-bucket-replicate-jqhu_queue_job --job_definition binamb-planx-pla-net-bucket-replicate-jqhu-batch_job_definition --thread_count 3 --max_retries 10
            command:
            - /bin/bash
            env:
            - name: REGION
              value: us-east-1
            - name: SOURCE_BUCKET
              value: kube-emalinowskiv1-gen3
            - name: DESTINATION_BUCKET
              value: manifestservice-emalinowskiv1-test
            - name: JOB_QUEUE
              value: binamb-planx-pla-net-bucket-replicate-jqhu_queue_job
            - name: JOB_DEFINITION
              value: binamb-planx-pla-net-bucket-replicate-jqhu-batch_job_definition
            image: quay.io/cdis/gdc_copy:feat_dcf-datareplicate
            imagePullPolicy: Always
            name: aws-bucket-replicate
            ports:
            - containerPort: 80
              protocol: TCP
            resources:
              limits:
                cpu: "1"
                memory: 1Gi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - name: cred-volume
              mountPath: "/root/.aws/credentials"
              subPath: aws-creds-secret
            - name: "setting-volume"
              mountPath: "/secrets/dcf_dataservice_settings.py"
              subPath: "dcf-dataservice-settings-secrets"
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          serviceAccount: binamb-helm-planx-pla-net-bucket-replicate-jqhu-sa
          serviceAccountName: binamb-helm-planx-pla-net-bucket-replicate-jqhu-sa
          terminationGracePeriodSeconds: 30
          volumes:
          - name: cred-volume
            secret:
              secretName: aws-creds-secret
          - name: setting-volume
            secret:
              secretName: "dcf-dataservice-settings-secrets"
{{- end }}
